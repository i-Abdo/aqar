rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Properties Collection
    match /properties/{propertyId} {
      // Allow anyone to read properties. The client-side code is responsible
      // for filtering and showing only 'active' properties to non-owners/admins.
      // This is the standard and most robust way to allow list queries.
      allow list, get: if true;
      
      // Only authenticated users can create a property.
      allow create: if isAuth();
      
      // Only the user who owns the property can update or delete it.
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Users Collection
    match /users/{userId} {
      // A user can only read or update their own document.
      allow read, update: if isOwner(userId);
      // Deny creation/deletion of user documents from the client for security.
      allow create, delete: if false;
    }
    
    // Reports Collection
    match /reports/{reportId} {
      // Only authenticated users can create a report.
      allow create: if isAuth();
      
      // Nobody can read, update, or delete reports from the client side.
      // This must be done via admin/backend functionality.
      allow read, update, delete: if false;
    }
    
    // User Issues Collection
    match /user_issues/{issueId} {
       // Only authenticated users can create an issue.
      allow create: if isAuth();

      // Nobody can read, update, or delete issues from the client side.
      allow read, update, delete: if false;
    }
    
    // Property Appeals Collection
    match /property_appeals/{appealId} {
      // An authenticated user can submit an appeal for their own property.
      // We check that the appeal's owner ID matches the authenticated user.
      allow create: if isOwner(request.resource.data.ownerUserId);
      
      // Nobody can read, update, or delete appeals from the client side.
      allow read, update, delete: if false;
    }

    // Email collections are write-only from client
    match /subscribers/{subscriberId} {
        allow create, update: if isAuth();
        allow read, delete: if false;
    }
    match /all-emails/{emailId} {
        allow create: if isAuth();
        allow read, update, delete: if false;
    }
  }
}
