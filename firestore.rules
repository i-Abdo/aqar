
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin status
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Properties:
    // - Anyone can list/read active properties.
    // - Authenticated users can create properties.
    // - Only the owner or an admin can update/delete their own property.
    // - Owners and admins can get their non-active properties.
    match /properties/{propertyId} {
      allow get: if resource.data.status == 'active' 
                   || (request.auth != null && request.auth.uid == resource.data.userId)
                   || isAdmin();

      // This rule allows the main queries on the site to work for everyone.
      // It ensures that any query on the 'properties' collection MUST include `where("status", "==", "active")`.
      allow list: if request.query.filters.exists(f, f.field.path == "status" && f.value == "active")
                    || (request.auth != null && request.query.filters.exists(f, f.field.path == "userId" && f.value == request.auth.uid));

      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Users:
    // - Users can read and update their own user document.
    // - Admins can read any user document.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Admin read access is useful for managing users
      allow get: if isAdmin(); 
      allow list: if isAdmin();
      // Allow new user creation during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Reports:
    // - Authenticated users can create reports.
    // - No one can read reports except via admin backend/cloud functions.
    // - Admins can update/manage reports.
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if isAdmin();
    }
    
    // User Issues:
    // - Authenticated users can create issues.
    // - Users can only read their own submitted issues.
    // - Admins can manage all issues.
    match /user_issues/{issueId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        allow list: if request.auth != null && request.query.filters.exists(f, f.field.path == "userId" && f.value == request.auth.uid);
        allow update, delete: if isAdmin();
    }

    // Property Appeals:
    // - Authenticated users can create appeals for their properties.
    // - Users can only read appeals they have submitted.
    // - Admins can manage all appeals.
    match /property_appeals/{appealId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUserId;
      allow read: if request.auth != null && request.auth.uid == resource.data.ownerUserId;
      allow list: if request.auth != null && request.query.filters.exists(f, f.field.path == "ownerUserId" && f.value == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // Email Collections (for internal use, prevent public read/write)
    match /all-emails/{emailId} {
      allow read, write: if false; // Should only be written from a trusted server/admin context
      allow create: if request.auth != null;
    }
    
    match /subscribers/{subscriberId} {
      allow read, write: if false; // Should only be written from a trusted server/admin context
      allow create: if request.auth != null;
    }
  }
}

    