rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Properties:
    // - Anyone can read a single 'active' property by its ID.
    // - Authenticated users can read their own properties regardless of status.
    // - A 'list' query is only allowed if it explicitly filters for 'status' == 'active'.
    match /properties/{propertyId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      allow get: if resource.data.status == 'active' || isOwner();
      allow list: if request.query.filters.exists(f, f.field.path == "status" && f.value == "active");

      allow create: if request.auth != null;
      allow update: if isOwner();
      allow delete: if false; // Deletes are handled by updating status field.
    }

    // Users:
    // - A user can read and write to their own document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Reports & User Issues:
    // - Authenticated users can create new reports/issues.
    // - No one can read/update/delete them from the client-side (admin only).
    match /reports/{reportId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false;
    }
    match /user_issues/{issueId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false;
    }

    // Property Appeals:
    // - Authenticated users can create new appeals.
    // - No one can read/update/delete them from the client-side (admin only).
    match /property_appeals/{appealId} {
        allow create: if request.auth != null;
        allow read, update, delete: if false;
    }
    
    // Other collections should be locked down by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
