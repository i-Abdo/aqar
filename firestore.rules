rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Properties: Allow public read for all properties, but restrict writes.
    // The application code is responsible for filtering which properties are shown to users (e.g., only "active" status).
    match /properties/{propertyId} {
      allow read: if true; // Anyone can read any property document.
      
      // Allow logged-in users to create properties.
      allow create: if request.auth != null;

      // Only the owner can update or delete their own property.
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // Users: Can only read/write their own data.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Email Collections: Allow creation for new sign-ups.
    match /all-emails/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    match /subscribers/{userId} {
       allow create, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reports and Issues: Logged-in users can create, but cannot read/update/delete.
    // This will be handled by admin roles later.
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // Block for now
    }
    
    match /user_issues/{issueId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // Block for now
    }

    // Appeals: Only the owner can submit an appeal (create). No one can read/update for now.
    match /property_appeals/{appealId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerUserId;
      allow read, update, delete: if false; // Block for now
    }
  }
}
