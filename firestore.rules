
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // --- Collections ---

    // Properties can be read by anyone if active.
    // They can be created by any authenticated user.
    // They can only be updated/deleted by their owner or an admin.
    match /properties/{propertyId} {
      allow read: if resource.data.status == 'active' || isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuth();
      allow update, delete: if isOwner(request.resource.data.userId) || isAdmin();
    }

    // Users can only read and write their own data.
    // Admins can read any user's data.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow get: if isAdmin();
      allow list: if isAdmin();
      // create is handled by the auth form logic
    }

    // Anyone authenticated can create a report.
    // Only admins can read/update reports.
    match /reports/{reportId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
    
    // Anyone authenticated can create an issue.
    // Only admins can read/update issues.
    match /user_issues/{issueId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }

    // Anyone authenticated can create an appeal for their own property.
    // Only admins can read/update appeals.
    match /property_appeals/{appealId} {
      allow create: if isAuth() && request.resource.data.ownerUserId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }
    
    // Lock down other collections by default
    match /subscribers/{subscriberId} {
        allow read, write: if false; // Managed by backend logic
    }
    match /all-emails/{emailId} {
       allow read, write: if false; // Managed by backend logic
    }

  }
}

    