
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Properties Collection
    match /properties/{propertyId} {
      // Anyone can read a property if its status is 'active'
      allow get: if resource.data.status == 'active';
      allow list: if request.query.filters.exists(f, f.field.path == "status" && f.value == "active");

      // Logged-in users can read their own properties regardless of status
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if request.auth != null && request.query.filters.exists(f, f.field.path == "userId" && f.value == request.auth.uid);

      // Logged-in users can create properties
      allow create: if request.auth != null;

      // Only the owner can update their property
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // No one can delete a document directly, status should be updated to 'deleted'
      allow delete: if false;
    }

    // Users Collection
    match /users/{userId} {
      // A user can read their own document
      allow get: if request.auth != null && request.auth.uid == userId;
      // A user can update their own document
      allow update: if request.auth != null && request.auth.uid == userId;
      // Users can create their own document upon signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // No one can list or delete user documents
      allow list, delete: if false;
    }

    // Reports Collection
    match /reports/{reportId} {
      // Logged-in users can create reports
      allow create: if request.auth != null;
      // Only admins can read/update/delete reports (implement admin logic later)
      allow read, update, delete: if false;
    }

    // User Issues Collection
    match /user_issues/{issueId} {
      // Logged-in users can create issues
      allow create: if request.auth != null;
      // Only admins can read/update/delete issues (implement admin logic later)
      allow read, update, delete: if false;
    }

    // Property Appeals Collection
    match /property_appeals/{appealId} {
       // The owner of the appeal can create it
      allow create: if request.auth != null && request.resource.data.ownerUserId == request.auth.uid;
       // Only admins can read/update/delete appeals
      allow read, update, delete: if false;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
